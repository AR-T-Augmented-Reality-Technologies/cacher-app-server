generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model scrapbook {
  scrapbook_id  Int         @id @unique @default(autoincrement())
  location      String      @db.VarChar(255)
  managed_by_id managed_by?
  images        image[]
}

model image {
  photo_id       Int              @id @default(autoincrement())
  image          String           @db.VarChar(255)
  likes          Int              @default(0)
  num_comments   Int              @default(0)
  caption        String           @db.VarChar(255)
  upload_date    DateTime         @db.DateTime
  uploaded_by    uploaded_by[]
  comments       comments[]
  reported_posts reported_posts[]
  scrapbook      scrapbook?       @relation(fields: [scrap_id], references: [scrapbook_id], onDelete: Cascade, onUpdate: Cascade)
  scrap_id       Int?
}

model users {
  user_id        Int              @id @unique @default(autoincrement())
  user_firstname String           @db.VarChar(255)
  user_lastname  String           @db.VarChar(255)
  user_email     String           @db.VarChar(255)
  user_password  String           @db.VarChar(255)
  user_username  String           @default("guest") @db.VarChar(255)
  ages           ages[]
  managed_by     managed_by[]
  private_user   private_user[]
  roles          roles[]
  uploaded_by    uploaded_by[]
  comments       comments[]
  reported_posts reported_posts[]
}

model ages {
  id      Int      @id @default(autoincrement())
  user_id Int
  dob     DateTime @db.Date
  age     Int
  users   users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "ages_ibfk_1")

  @@index([user_id], map: "user_id")
}

model managed_by {
  id           Int       @id @default(autoincrement())
  scrapbook_id Int       @unique(map: "scrapbook_id")
  user_id      Int
  scrapbook    scrapbook @relation(fields: [scrapbook_id], references: [scrapbook_id], onDelete: NoAction, onUpdate: NoAction, map: "managed_by_ibfk_1")
  users        users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "managed_by_ibfk_2")

  @@index([user_id], map: "user_id")
}

model preoccupied {
  location     String @id @db.VarChar(255)
  closest_book String @db.VarChar(255)
}

model roles {
  id                Int    @id @default(autoincrement())
  user_id           Int
  roles_name        String @db.VarChar(255)
  roles_serialized  String @db.VarChar(255)
  roles_description String @db.VarChar(255)
  users             users  @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "roles_ibfk_1")

  @@index([user_id], map: "user_id")
}

model uploaded_by {
  id       Int   @id @default(autoincrement())
  photo_id Int
  user_id  Int
  image    image @relation(fields: [photo_id], references: [photo_id], onDelete: NoAction, onUpdate: NoAction, map: "uploaded_by_ibfk_1")
  users    users @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "uploaded_by_ibfk_2")

  @@index([photo_id], map: "photo_id")
  @@index([user_id], map: "user_id")
}

model private_user {
  id      Int   @id @default(autoincrement())
  user_id Int
  users   users @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "private_user_ibfk_1")

  @@index([user_id], map: "user_id")
}

model comments {
  comment_id Int      @id @default(autoincrement())
  user_id    Int
  photo_id   Int
  comment    String   @db.VarChar(255)
  timestamp  DateTime @db.DateTime
  users      users    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "comments_ibfk_1")
  image      image?   @relation(fields: [photo_id], references: [photo_id], onDelete: NoAction, onUpdate: NoAction, map: "comments_ibfk_2")

  @@index([user_id], map: "user_id")
  @@index([photo_id], map: "photo_id")
}

model reported_posts {
  reportid       Int     @id @default(autoincrement())
  reporter_id    Int
  photo_id       Int
  issue_resolved Boolean
  reason         String  @db.VarChar(255)
  users          users   @relation(fields: [reporter_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "reported_posts_ibfk_1")
  image          image?  @relation(fields: [photo_id], references: [photo_id], onDelete: NoAction, onUpdate: NoAction, map: "reported_posts_ibfk_2")
}
