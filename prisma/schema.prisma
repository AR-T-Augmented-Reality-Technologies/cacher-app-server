generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model scrapbook {
  scrapbook_id String      @id @unique(map: "scrapbook_id") @db.VarChar(255)
  location     String      @db.VarChar(255)
  managed_by   managed_by?
  pages        pages[]
}

model users {
  user_id        Int              @id @unique @default(autoincrement())
  user_firstname String           @db.VarChar(255)
  user_lastname  String           @db.VarChar(255)
  user_email     String           @db.VarChar(255)
  user_password  String           @db.VarChar(255)
  user_username  String           @default("guest") @db.VarChar(255)
  ages           ages[]
  blocked        blocked[]
  following      following[]
  managed_by     managed_by[]
  private_user   private_user[]
  roles          roles[]
  uploaded_by    uploaded_by[]
  comments       comments[]
  reply_comments reply_comments[]
}

model ages {
  id      Int      @id @default(autoincrement())
  user_id Int
  dob     DateTime @db.Date
  age     Int
  users   users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "ages_ibfk_1")

  @@index([user_id], map: "user_id")
}

model image {
  photo_id     String        @id @db.VarChar(255)
  image        String        @db.VarChar(255)
  likes        Int
  num_comments Int
  caption      String        @db.VarChar(255)
  upload_date  DateTime      @db.Date
  uploaded_by  uploaded_by[]
  comments     comments[]
}

model managed_by {
  id           Int       @id @default(autoincrement())
  scrapbook_id String    @unique(map: "scrapbook_id") @db.VarChar(255)
  user_id      Int
  scrapbook    scrapbook @relation(fields: [scrapbook_id], references: [scrapbook_id], onDelete: NoAction, onUpdate: NoAction, map: "managed_by_ibfk_1")
  users        users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "managed_by_ibfk_2")

  @@index([user_id], map: "user_id")
}

model page {
  page_id         String         @id @db.VarChar(255)
  page_collection String         @db.VarChar(255)
  pages           pages          @relation(fields: [page_collection], references: [page_collection], onDelete: NoAction, onUpdate: NoAction, map: "page_ibfk_1")
  page_options    page_options[]

  @@index([page_collection], map: "page_collection")
}

model page_options {
  id               Int    @id @default(autoincrement())
  page_id          String @db.VarChar(255)
  page_title       String @db.VarChar(255)
  background_color String @db.VarChar(7)
  orientation      String @db.VarChar(255)
  page             page   @relation(fields: [page_id], references: [page_id], onDelete: NoAction, onUpdate: NoAction, map: "page_options_ibfk_1")

  @@index([page_id], map: "page_id")
}

model pages {
  page_collection String    @id @db.VarChar(255)
  scrapbook_id    String    @db.VarChar(255)
  number_of_pages Int
  scrapbook       scrapbook @relation(fields: [scrapbook_id], references: [scrapbook_id], onDelete: NoAction, onUpdate: NoAction, map: "pages_ibfk_1")
  page            page[]

  @@index([scrapbook_id], map: "scrapbook_id")
}

model preoccupied {
  location String @id @db.VarChar(255)
}

model roles {
  id                Int    @id @default(autoincrement())
  user_id           Int
  roles_name        String @db.VarChar(255)
  roles_serialized  String @db.VarChar(255)
  roles_description String @db.VarChar(255)
  users             users  @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "roles_ibfk_1")

  @@index([user_id], map: "user_id")
}

model uploaded_by {
  id       Int    @id @default(autoincrement())
  photo_id String @db.VarChar(255)
  user_id  Int
  image    image  @relation(fields: [photo_id], references: [photo_id], onDelete: NoAction, onUpdate: NoAction, map: "uploaded_by_ibfk_1")
  users    users  @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "uploaded_by_ibfk_2")

  @@index([photo_id], map: "photo_id")
  @@index([user_id], map: "user_id")
}

model private_user {
  id      Int   @id @default(autoincrement())
  user_id Int
  users   users @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "private_user_ibfk_1")

  @@index([user_id], map: "user_id")
}

model following {
  id        Int   @id @default(autoincrement())
  user_id_1 Int
  user_id_2 Int
  users     users @relation(fields: [user_id_1], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "following_ibfk_1")

  @@index([user_id_1], map: "user_id")
}

model blocked {
  id        Int   @id @default(autoincrement())
  user_id_1 Int
  user_id_2 Int
  users     users @relation(fields: [user_id_1], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "blocked_ibfk_1")

  @@index([user_id_1], map: "user_id")
}

model comments {
  comment_id Int      @id @default(autoincrement())
  user_id    Int
  photo_id   String   @db.VarChar(255)
  comment    String   @db.VarChar(255)
  timestamp  DateTime @db.Date

  users          users            @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "comments_ibfk_1")
  image          image            @relation(fields: [photo_id], references: [photo_id], onDelete: NoAction, onUpdate: NoAction, map: "comments_ibfk_2")
  reply_comments reply_comments[]

  @@index([user_id], map: "user_id")
  @@index([photo_id], map: "photo_id")
}

model reply_comments {
  replycomment_id Int      @id @default(autoincrement())
  user_id         Int
  comment_id      Int
  comment         String   @db.VarChar(255)
  timestamp       DateTime @db.Date

  users    users    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "reply_comments_ibfk_1")
  comments comments @relation(fields: [comment_id], references: [comment_id], onDelete: NoAction, onUpdate: NoAction, map: "reply_comments_ibfk_2")

  @@index([user_id], map: "user_id")
  @@index([comment_id], map: "comment_id")
}
